Wish the web server handles route {/cnc/$} with handler {
    html {
<html>
  <head>
    <style>
     li { list-style-position: inside; }
     li input { background: rgba(255, 255, 255, 0.5); }
    </style>
  </head>
  <body>
    <script>
     let ws;
     let calibrationTagCameraCorners;
     let calibrationTagProjectorCorners;
     function redisplayCalibrationTag(x = 100, y = 100, size = 50) {
       const bs = size / 10; // size of a single block in the AprilTag
       // these are inner corners, not outer corners, to match the
       // corners that the detector reports:
       calibrationTagProjectorCorners = [
         [x+2*bs, y+size-2*bs], // bottomleft
         [x+size-2*bs, y+size-2*bs], // bottomright
         [x+size-2*bs, y+2*bs], // topright
         [x+2*bs, y+2*bs], // topleft
       ];
       ws.send(`
          Retract /anyone/ wishes to display CNC calibration tag with /...options/
          Assert $chan wishes to display CNC calibration tag with \\
            id 48600 x ${x} y ${y} size ${size}
       `);
     }
     function destroyCalibrationTag() {
       ws.send(`
          Retract $chan wishes to start moving CNC calibration tag
          Retract $chan wishes to display CNC calibration tag with /...options/
       `);
     }
     function setCalibrationTagCameraCorners(corners) {
       calibrationTagCameraCorners = corners;
       moveCalibrationTagCameraCornersDiv.innerHTML =
         `<ol>` +
         corners.map(corner =>
           `<li><code>[${corner[0].toFixed(2)}, ${corner[1].toFixed(2)}]</code></li>`
         ).join("\n") +
         `</ol>`;
     }
    </script>

    <ol>
      <li id="displayCalibrationTagListItem">
        Display calibration tag on projector:
        <button id="displayCalibrationTagButton">Display Calibration Tag</button>
      </li>
      <script>
       function stepDisplayCalibrationTag() {
         displayCalibrationTagButton.addEventListener('click', (e) => {
           ws = new WebSocket(window.location.origin.replace("http", "ws") + "/ws");
           ws.onopen = () => { doneDisplayCalibrationTag(); };
           ws.onclose = () => {
             document.body.style.background = 'red';
           };
           ws.onerror = (err) => {
             document.body.style.background = 'red';
             console.error('Socket encountered error: ', err.message, 'Closing socket');
             ws.close();
           }
           ws.onmessage = (msg) => { eval(msg.data); };
           window.onbeforeunload = () => { destroyCalibrationTag(); };
         });
       }
       function doneDisplayCalibrationTag() {
         displayCalibrationTagListItem.style.textDecoration = 'line-through';
         displayCalibrationTagButton.style.textDecoration = 'line-through';
         ws.send(`Assert $chan wishes to start moving CNC calibration tag`);
       }
      </script>

      <li id="moveCalibrationTagListItem" style="display: none">
        Move the calibration tag so that it's on the surface of the
        material that you want to cut:
        <div id="moveCalibrationTagContainer" class="container"
             style="background: #eee; width: 480px; height: 360px">
          <div class="movable"
            style="background: #444;
                      font-family: sans-serif;
                      text-align: center;
                      user-select: none;
                      position: relative;
                      cursor: move;
                      overflow: hidden;
                      color: #eee">
            <b>Drag</b> me + <b>resize</b> from the resize corner
            <div class="resize-handle"
              style="position: absolute; right: 0; bottom: 0;
                        width: 12px; height: 12px;
                        background: #c44;
                        cursor: nwse-resize"></div>
          </div>
        </div>
        <p>Calibration tag corners in camera-space: <div id="moveCalibrationTagCameraCornersDiv">(not detected yet)</div></p>
        <button id="moveCalibrationTagDoneButton">Done (tag is on material)</button>
      </li>
      <script>
       function stepMoveCalibrationTag(displayWidth, displayHeight) {
         moveCalibrationTagListItem.style.display = "";
         const [containerWidth, containerHeight] = [
           moveCalibrationTagContainer.offsetWidth,
           moveCalibrationTagContainer.offsetHeight
         ];

         function makeDraggable(state, el) {
           // from https://www.redblobgames.com/making-of/draggable/
           function start(event) {
             if (event.button !== 0) return; // left button only
             event.stopPropagation(); // for nested draggables
             let {x, y} = state.eventToCoordinates(event);
             state.dragging = {dx: state.pos.x - x, dy: state.pos.y - y};
             el.setPointerCapture(event.pointerId);
           }
           function end(_event) { state.dragging = null; }
           function move(event) {
             if (!state.dragging) return;
             event.stopPropagation(); // for nested draggables
             let {x, y} = state.eventToCoordinates(event);
             state.pos = {x: x + state.dragging.dx, y: y + state.dragging.dy};
           }

           el.addEventListener('pointerdown', start);
           el.addEventListener('pointerup', end);
           el.addEventListener('pointercancel', end);
           el.addEventListener('pointermove', move)
           el.addEventListener('touchstart', (e) => e.preventDefault());
         }
         const el = document.querySelector(".movable");
         let state = { x: 30, y: 10, size: 100 };

         function resizeAndPosition() {
           let {x, y, size} = state;
           el.style.transform = `translate(${x}px,${y}px)`;
           el.style.width = `${size}px`; el.style.height = `${size}px`;
           // Rescale from container-space to display-space:
           redisplayCalibrationTag(x * displayWidth / containerWidth,
                                   y * displayHeight / containerHeight,
                                   size * displayWidth / containerWidth);
         }

         let outerState = {
           eventToCoordinates(event) { return {x: event.clientX, y: event.clientY}; },
           dragging: false,
           get pos() { return {x: state.x, y: state.y}; },
           set pos(p) {
             const container = el.parentNode.getBoundingClientRect();
             const bounds = el.getBoundingClientRect();
             state.x = p.x;
             state.y = p.y;
             resizeAndPosition();
           },
         }

         let innerState = {
           eventToCoordinates(event) { return {x: event.clientX, y: event.clientY}; },
           dragging: false,
           get pos() { return {x: state.x + state.size, y: state.y + state.size}; },
           set pos(p) {
             state.size = Math.min(Math.max(25, p.x - state.x), Math.max(25, p.y - state.y));
             resizeAndPosition();
           },
         }
         resizeAndPosition();
         makeDraggable(outerState, el);
         makeDraggable(innerState, document.querySelector(".resize-handle"));

         moveCalibrationTagDoneButton.addEventListener("click", doneMoveCalibrationTag);
       }
       function doneMoveCalibrationTag() {
         if (!calibrationTagProjectorCorners) {
           alert("Error: Calibration tag not projected yet; can't continue with calibration.");
           return;
         }
         if (!calibrationTagCameraCorners) {
           alert("Error: Calibration tag not seen on camera yet; can't continue with calibration.");
           return;
         }
         moveCalibrationTagListItem.style.textDecoration = "line-through";
         // Locks in projector coordinates, since tag can't be moved after this:
         moveCalibrationTagListItem.querySelector(".container").style.pointerEvents = "none";
         moveCalibrationTagDoneButton.style.textDecoration = "line-through";

         // Locks in camera coordinates by removing the tag from display:
         destroyCalibrationTag();

         stepMoveTool();
       }
      </script>

      <li id="moveTool" style="display: none">
        Move the CNC machine (tool center point) to each of the 4
        inner corners of the tag. Write down each point's x and y
        coordinates in CNC-space:
        <ol id="moveToolList">
          <li><input type="text"><input type="text"></li>
          <li><input type="text"><input type="text"></li>
          <li><input type="text"><input type="text"></li>
          <li><input type="text"><input type="text"></li>
        </ol>
        
        <button id="moveToolDoneButton">Done</button>
      </li>
      <script>
       function stepMoveTool() {
         moveTool.style.display = "";

         const colors = ["green", "yellow", "cyan", "magenta"];

         pointEls = document.querySelectorAll("#moveToolList > li");
         colors.forEach((color, idx) => { pointEls[idx].style.background = color; });

         const pointsTcl = calibrationTagProjectorCorners.map((corner, idx) =>
           `{color ${colors[idx]} index ${idx+1} position {${corner.join(" ")}}}`
         ).join(" ");
         ws.send(`Assert $chan wishes to start moving CNC tool point to projector points {${pointsTcl}}`);

         moveToolDoneButton.addEventListener("click", doneMoveTool);
       }
       function doneMoveTool() {
         moveTool.style.textDecoration = "line-through";

         // TODO: Lock in CNC coordinates.?

         stepPreviewGcode();
       }
      </script>

      <li id="previewGcode" style="display: none">
        TODO: Upload a G-code file to preview:
        <input type="file" id="previewGcodeFileInput">
      </li>
      <script src="./vendor/peggy.min.js"></script>
      <script type="module">
       import { interpret } from "./gcode.js";

       window.stepPreviewGcode = function stepPreviewGcode() {
         previewGcode.style.display = "";
         previewGcodeFileInput.addEventListener("change", () => {
           if (previewGcodeFileInput.files.length !== 1) return;
           const file = previewGcodeFileInput.files[0];

           const reader = new FileReader();
           reader.onload = (e) => {
             const content = e.target.result;
             const { path: totalPath } = interpret(content);

             // Separate paths based on Z
             const paths = [];
             let currentPath = [];
             for (let i = 0; i < totalPath.length; i += 1) {
               const [x, y, z] = totalPath[i];

               if (z > 0) {
                 if (currentPath.length > 0) {
                   paths.push(currentPath);
                   currentPath = [];
                 }
               } else {
                 currentPath.push({ x, y });
               }
             }

             console.log("paths", paths);
           };
           reader.readAsText(file);
         });
       }
      </script>
    </ol>

    <script>
     stepDisplayCalibrationTag();
    </script>
  </body>
</html>
    }
}
Wish the web server handles route {/cnc/(.+)$} with handler [list apply {{this} {
    upvar path path; regexp {/cnc/(.+)$} $path -> filename
    set fd [open [file dirname $this]/$filename r]
    fconfigure $fd -encoding binary -translation binary
    set body [read $fd]; close $fd

    return [dict create \
                statusAndHeaders "HTTP/1.1 200 OK
Connection: close
Content-Type: text/javascript; charset=utf-8\n\n" \
                body $body]
}} $this]

When the display /disp/ has width /displayWidth/ height /displayHeight/ &\
     /someone/ wishes to display CNC calibration tag with /...options/ {
    set id [dict get $options id]
    set tx [dict get $options x]; set ty [dict get $options y]
    set size [dict get $options size]

    set tagImage [::tagImageForId $id]
    set tagBits [list]
    # 10x10 AprilTag -> 100 bits
    for {set y 0} {$y < 10} {incr y} {
        for {set x 0} {$x < 10} {incr x} {
            set j [expr {$y * [image_t bytesPerRow $tagImage] + $x}]
            set bit [== [image_t data $tagImage $j] 255]
            lappend tagBits $bit
        }
    }
    # -> 4 32-bit integers
    set tagBitsVec [list 0b[join [lreverse [lrange $tagBits 0 31]] ""] \
                        0b[join [lreverse [lrange $tagBits 32 63]] ""] \
                        0b[join [lreverse [lrange $tagBits 64 95]] ""] \
                        0b[join [lreverse [lrange $tagBits 96 127]] ""]]

    set topLeft [list $tx $ty]
    set topRight [list [+ $tx $size] $ty]
    set bottomRight [list [+ $tx $size] [+ $ty $size]]
    set bottomLeft [list $tx [+ $ty $size]]
    Wish the GPU draws pipeline "apriltag" with arguments \
        [list $tagBitsVec $topLeft $topRight $bottomRight $bottomLeft] \
        layer 100

    # Blanket the whole projector area with white, except the tag, so
    # that we're more likely to detect the tag in contrast.
    Wish to draw a quad with \
        p0 [list 0 0] p1 [list $displayWidth 0] \
        p2 [list $displayWidth $displayHeight] p3 [list 0 $displayHeight] \
        color white layer 99
}

Wish the GPU compiles pipeline "apriltag" {
    {uvec4 tagBitsVec vec2 a vec2 b vec2 c vec2 d} {
        vec2 vertices[4] = vec2[4](a, b, d, c);
        return vertices[gl_VertexIndex];
    } {fn ::invBilinear} {
        vec2 p = gl_FragCoord.xy;
        vec2 uv = invBilinear(p, a, b, c, d);

        int x = int(uv.x * 10); int y = int(uv.y * 10);
        int bitIdx = y * 10 + x;
        uint bit = (tagBitsVec[bitIdx / 32] >> (bitIdx % 32)) & 0x1;
        return bit == 1 ? vec4(1, 1, 1, 1) : vec4(0, 0, 0, 1);
    }
}

When the display /disp/ has width /displayWidth/ height /displayHeight/ &\
     /chan/ wishes to start moving CNC calibration tag {
    ::websocket::send $chan text "stepMoveCalibrationTag($displayWidth, $displayHeight);"
}

if {$::tcl_platform(os) eq "Darwin"} {
    # HACK: for laptop testing:
    Claim tag 48600 has corners {{0 0} {100 100} {200 200} {300 300}}
}

When /chan/ wishes to display CNC calibration tag with /...options/ {
    When the clock time is /t/ {
        # Only report a new tag location to the web frontend every 100ms.
        Claim the CNC calibration tag time is [floor [* $t 10]]
    }

    set id [dict get $options id]
    When the CNC calibration tag time is /t/ &\
         tag $id has corners /corners/ {
        set cornersJs [concat {[} [join [lmap corner $corners {
            concat {[} [join $corner ","] {]}
        }] ", "] {]}]
        ::websocket::send $chan text "setCalibrationTagCameraCorners($cornersJs);"
    }
}

When /chan/ wishes to start moving CNC tool point to projector points /points/ {
    # TODO: display the corners not as an apriltag, just as circles
    foreach point $points {
        dict with point {
            Wish to draw text with position $position text " $index " \
                color $color \
                anchor [expr {($index == 1 || $index == 4) ? "right" : "left"}] \
                scale 1.0 layer 101
            Wish to draw a circle with center $position color $color \
                radius 5 thickness 2 layer 102
        }
    }
}
